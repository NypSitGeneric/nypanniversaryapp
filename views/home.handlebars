<!-- display grid of tiles -->
<div class="main">
    <div class="item1"><button id="autoClick" onclick="clicked()" hidden>Click to enable sound</button></div>
    <div class="item2"></div>
    <div class="item3">
        <div class="grid">
            {{#each tiles}}
                <div id="{{#add @index }}{{/add}}" class="inner {{#if this}}flip{{/if}}">
                    <div class="front"></div>
<!--                    <div class="front"><p>{{#add @index}}{{/add}}</p></div>-->
                    <div class="back"><img src="/tiles/tile_{{#add @index}}{{/add}}.png" /></div>
                </div>
            {{/each}}
        </div></div>
    <div class="item4">
        <div class="grid_logo">
            {{#each logoTiles}}
                <div id="{{#logo @index }}{{/logo}}" class="inner {{#if this}}flip{{/if}}">
                    <div class="front_logo"></div>
<!--                    <div class="front_logo"><p>{{#add @index}}{{/add}}</p></div>-->
                    <div class="back_logo"><img src="/tiles/tile_logo_{{#add @index}}{{/add}}.png" alt="loading"/></div>
                </div>
            {{/each}}
        </div>
    </div>
    <audio id="MyAudioElement" hidden>
        <source src="audio/after_flipped.mp3">
        <source src="audio/after_flipped.mp3">
        Your browser does not support the audio element.
    </audio>

</div>

<style>
    .main {
        display: grid;
        grid-template-columns: 66% 34%;
        grid-template-rows: auto auto auto;
        row-gap: 40%;
    }
    .grid_logo {
        padding-right: 6px;
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: repeat(1, 1fr);
        height:100%; /*75*/
        width: 100%;
        display: grid;
    }
    .grid {
        /*padding-right: 6px;*/
        padding-left: 6px;
        display: grid;
        grid-template-columns: repeat(61, 1fr);
        grid-template-rows: repeat(18, 1fr);
        /*height: 20vh;*/
        height:25vh; /*25*/
        width: 100%; /*edit*/
    }
    p{
        font-size: 8px;
        color: white;
        text-align: center;
    }
    .inner {
        width: 100%;
        height: 100%;
        transition: transform 1s;
        transform-style: preserve-3d;
    }
    .item3 {
        padding-top: 15%;
    }
    .item4 {
        padding-top: 29.1%;
    }
    .front, .back, .front_logo, .back_logo {
        position: absolute;
        width: 100%;
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
        height: 100%;
    }

    .front{
        background-color: #184896;
        /*height: 8px;*/
        /*width: 14px;*/
    }
    .front_logo{
        background-color: #184896;
        /*height: 20px;*/
        /*width: 21px;*/
    }
    .back, .back_logo {
        transform: rotateY(180deg);
    }

    .flip {
        transform: rotateY(180deg);
    }

    .tile {
        /*border: 1px solid black;*/
    }

    img {
        width: 100%;
        height: 100%;
    }
</style>
<script>

function clicked() {
    console.log("clicked");
    // document.getElementById("autoClick").click();
    document.getElementById("autoClick").hidden = true;
}

var sectionIds = [7, 4, 2, 6, 9, 1, 5, 3, 8];
    var sections = {};

    window.onload = () => {
        console.log("load");

        // set tile ids for sections
        for(var [index, section] of sectionIds.entries()) {
            // generate array of ids for current section
            // start: index * 48 + 1
            sections[section] = [...Array(122).keys()].map(i => i + (index * 122 + 1));
        }
        // open connection
        var connection = new EventSource("/connect");
        connection.onmessage = e => {
            // update grid
            if(e.data != "connected") {
                if(e.data == "reset") {
                    for(var tile of document.getElementsByClassName("inner")) {
                        tile.classList.remove("flip");
                    }
                }else if (e.data === "unfliplogo") {
                    var logo1 =  document.getElementById("logo_1")
                    var logo2 =  document.getElementById("logo_2")
                    logo1.classList.remove("flip");
                    logo2.classList.remove("flip");
                }else if(e.data.includes("section")) {
                    // get section id
                    var section = parseInt(e.data.split(" ")[1]);
                    //console.log("KK",sections[section]);
                    // get remaining tiles in section
                    var remaining = sections[section].filter(id => !document.getElementById(id).classList.contains("flip"));
                    // shuffle remaining tiles in section
                    shuffleArray(remaining);
                    var i = 0;
                    // set timer
                    (function loop() {
                        // set random delay between 500ms and 1sec
                        var delay = Math.floor(Math.random() * (50 - 500 + 1)) + 500;
                        if(i <= 121) {
                            setTimeout(function() {
                                // flip tile
                                document.getElementById(remaining[i++]).classList.add("flip");
                                loop();
                            }, delay);
                        }
                    }());
                } else if(e.data == "remaining") {
                    for(var tile of document.getElementsByClassName("inner")) {
                        tile.classList.add("flip");
                    }
                } else if(e.data == "ping") {
                    console.log("ping");
                } else {
                    if(!document.getElementById(e.data).classList.contains("flip")) {
                        document.getElementById(e.data).classList.toggle("flip")
                    }
                    if (e.data == "logo_2") {
                        console.log("KK","Audio");
                        document.getElementById("MyAudioElement").play();
                    }
                }
            };
        };
    }

    document.onkeydown = e => {
        console.log(e.key);
        if(e.ctrlKey) {
            if(e.key == "r") {
                e.preventDefault();
                e.stopPropagation();
                // reset
                var reset = new XMLHttpRequest();
                reset.open("post", "reset");
                reset.send();
            } else if(e.key == "m") {
                // flip remaining tiles
                var reset = new XMLHttpRequest();
                reset.open("post", "flipremaining");
                reset.send();
            }
        }
    };

    function shuffleArray(array) {
        for(let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }
</script>